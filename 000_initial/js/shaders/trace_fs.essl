Shader.source[document.currentScript.src.split('js/shaders/')[1]]=`#version 300 es
precision highp float;

in vec2 tex;
in vec4 rayDir;
out vec4 fragmentColor;
uniform vec3 eyePosition;
uniform mat4 quadrics[16];
uniform mat4 clippers[16];
uniform vec4 brdfs[16];
uniform vec4 lights[16];
uniform vec3 reflective[16];
uniform vec3 emission[16];
uniform samplerCube background; 
uniform sampler2D prevImage;
uniform float frameNumber;
uniform vec4 randoms[16];

float snoise(vec3 r) {
  vec3 s = vec3(7502, 22777, 4767);
  float f = 0.0;
  for(int i=0; i<16; i++) {
    f += sin( dot(s - vec3(32768, 32768, 32768), r)
                                 / 65536.0);
    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
  }
  return f / 32.0 + 0.5 - r.y;
}


float intersectQuadric(mat4 A,vec4 e,vec4 d){
  float a=dot(d*A,d);
  float b=dot(d*A,e)+dot(e*A,d);
  float c=dot(e*A,e);
  float D=b*b-4.*a*c;
  
  if(D<0.)return-1.;
  
  float t1=(-b+(sqrt(D)))/(2.*a);
  float t2=(-b-(sqrt(D)))/(2.*a);
  
  return(t1<0.)?t2:((t2<0.)?t1:min(t1,t2));
}

float intersectClippedQuadric(mat4 A,mat4 B,vec4 e,vec4 d){
  float a=dot(d*A,d);
  float b=dot(d*A,e)+dot(e*A,d);
  float c=dot(e*A,e);
  float D=b*b-4.*a*c;
  
  if(D<0.)return-1.;
  
  float t1=(-b+(sqrt(D)))/(2.*a);
  float t2=(-b-(sqrt(D)))/(2.*a);
  
  vec4 hit=e+d*t1;
  float t11=dot(hit*B,hit);
  if(t11>0.)t1=-1.;
  
  vec4 hit2=e+d*t2;
  float t21=dot(hit2*B,hit2);
  if(t21>0.)t2=-1.;
  return(t1<0.)?t2:((t2<0.)?t1:min(t1,t2));
}

bool findBestHit(inout float bestT,inout int bestQuadricIndex, vec4 e,vec4 d){
  bool isHit=false;
  for(int i=0;i<16;i++){
    mat4 A=quadrics[i];
    mat4 B=clippers[i];
    float t=intersectClippedQuadric(A,B,e,d);
    if((t>=0.)&&((t<bestT)||(bestT<0.))){
      bestT=t;
      bestQuadricIndex=i;
      isHit=true;
    }
  }
  return isHit;
}

vec3 coliroze(vec4 hit,vec3 normal,vec4 brdfs,vec4 light){
  vec3 lightDir = normalize(light.xyz - hit.xyz * light.w);
  if(dot(normal,rayDir.xyz)>0.)normal=-normal;
  vec3 h = normalize(lightDir*-1.+rayDir.xyz);
  float blinn=dot(normal,h);
  blinn=pow(blinn,40.);
  
  float phong=dot(normal,lightDir);
  if(phong>0.){
    vec4 dir=vec4(lightDir,0.)*1.;
    float bestT=-1.;
    int index=0;
    bool IsInDark=findBestHit(bestT,index,hit+dir*.01,dir);
    if(!IsInDark){
      if(blinn>=0.){
        return brdfs.xyz*phong+vec3(1.,1.,1.)*blinn;
      }else{
        return brdfs.xyz*phong;
      }
    }
  }
  return vec3(0.,0.,0.);
  
}

vec3 colirozeAll(vec4 hit,vec3 normal,vec4 brdfs){
  //texture(background, reflect(rayDir.xyz,normal));
  vec3 outColor = vec3(0,0,0);
  for(int i=0;i<16;i++){
    vec3 color=coliroze(hit,normal,brdfs,lights[i]);
    outColor+=color;
  }
  return outColor;
}

const float PI   = 3.14159265358979323846264; // PI
const float PHIG = 1.61803398874989484820459 * 00000.1; // Golden Ratio   
const float PIG  = 3.14159265358979323846264 * 00000.1; // PI
const float SQ2G = 1.41421356237309504880169 * 10000.0; // Square Root of Two

float goldRand(in vec3 seed){
    return fract(sin(dot(seed.xy*(seed.z+PHIG), vec2(PHIG, PIG)))*SQ2G);
}

vec3 newDirection(vec3 prev, int i, vec3 normal, bool random) {
  if (!random) {
      return normalize( reflect(prev,normal));
  } else {
      vec3 ir = randoms[i].xyz;
      float perPixelNoise = goldRand(vec3(tex * 1024.0, 1.0)) * 6.28318530718;
      ir.x = cos(perPixelNoise) * ir.x + sin(perPixelNoise) * ir.z;
      ir.z =-sin(perPixelNoise) * ir.x + cos(perPixelNoise) * ir.z;
      return normalize(normal + ir);
  }
}

void main(void){
  vec4 d=vec4(normalize(rayDir.xyz),0.);
  vec4 e=vec4(eyePosition,1.);
  vec3 w = vec3(1,1,1);
  vec3 arnyalas = vec3(0,0,0);
  for (int i=0; i < 2; i++) {
    if (w.x + w.y + w.z < 0.001) break;
    float minT=-1.;
    int bestQuadricIndex=0;
    if(findBestHit(minT,bestQuadricIndex,e,d)){
      vec4 hit=e+d*minT;
      mat4 A=quadrics[bestQuadricIndex];
      vec3 normal=normalize((hit*A+A*hit).xyz);
      if(dot(normal,d.xyz)>0.)normal=-normal;
      vec4 bestBrdfs=brdfs[bestQuadricIndex];
      vec3 color = colirozeAll(hit,normal,bestBrdfs);
      e.xyz = hit.xyz + normal*0.001;
      vec3 refl = reflective[bestQuadricIndex];
      vec3 negreflt = vec3(1, 1, 1 ) - refl;
      arnyalas += emission[bestQuadricIndex] + color * w * negreflt;
      w *= refl;
      d.xyz = newDirection(d.xyz, i, normal, false);
    } else {
      arnyalas += texture(background, d.xyz).xyz * w;
      break;
    }

  }
  fragmentColor = vec4(arnyalas * (1./frameNumber) + texture(prevImage, tex).xyz * (1. - 1./frameNumber) , 1.);
}

`;